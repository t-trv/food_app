generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addresses {
  id           Int       @id @default(autoincrement())
  user_id      Int
  address_line String    @db.VarChar(255)
  city         String    @db.VarChar(30)
  district     String    @db.VarChar(30)
  created_at   DateTime? @default(now()) @db.DateTime(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "addresses_ibfk_1")

  @@index([user_id], map: "addresses_ibfk_1")
}

model roles {
  id        Int         @id @default(autoincrement())
  name      String      @unique(map: "name_UNIQUE") @db.VarChar(30)
  user_role user_role[]
}

model user_role {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_role_ibfk_1")
  roles   roles @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "user_role_ibfk_2")

  @@unique([user_id, role_id])
  @@index([role_id], map: "user_role_ibfk_2_idx")
}

model users {
  id            Int         @id @default(autoincrement())
  username      String      @unique(map: "username_UNIQUE") @db.VarChar(50)
  hash_password String      @db.VarChar(255)
  name          String?     @db.VarChar(30)
  avatar        String?     @db.VarChar(255)
  email         String?     @unique(map: "email_UNIQUE") @db.VarChar(255)
  phone         String?     @unique(map: "phone_UNIQUE") @db.VarChar(15)
  created_at    DateTime?   @default(now()) @db.DateTime(0)
  updated_at    DateTime?   @default(now()) @db.Timestamp(0)
  deleted_at    DateTime?   @db.DateTime(0)
  addresses     addresses[]
  orders        orders[]
  user_role     user_role[]

  @@index([deleted_at])
}

model food_variant {
  id         Int       @id @default(autoincrement())
  food_id    Int?
  variant_id Int?
  foods      foods?    @relation(fields: [food_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "food_variant_ibfk_1")
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "food_variant_ibfk_2")

  @@unique([food_id, variant_id])
  @@index([food_id], map: "food_id")
  @@index([variant_id], map: "variant_id")
}

model foods {
  id               Int              @id @default(autoincrement())
  side_category_id Int?
  name             String?          @unique(map: "name") @db.VarChar(100)
  image            String?          @db.VarChar(255)
  slug             String           @db.VarChar(100)
  preparation_time Int
  description      String           @db.VarChar(255)
  price            Decimal          @db.Decimal(10, 2)
  discount         Decimal?         @db.Decimal(10, 2)
  is_active        Boolean?         @default(true)
  deleted_at       DateTime?        @db.DateTime(0)
  created_at       DateTime?        @default(now()) @db.DateTime(0)
  updated_at       DateTime?        @updatedAt @db.DateTime(0)
  food_variant     food_variant[]
  side_categories  side_categories? @relation(fields: [side_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "foods_ibfk_1")
  order_items      order_items[]

  @@index([side_category_id], map: "side_category_id")
}

model main_categories {
  id              String            @id @db.VarChar(10)
  name            String            @db.VarChar(30)
  
  side_categories side_categories[]
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  food_id    Int?
  variant_id Int?
  quantity   Int @default(1)
  price      Decimal   @db.Decimal(10, 2)
  created_at       DateTime?        @default(now()) @db.DateTime(0)
  updated_at       DateTime?        @updatedAt @db.DateTime(0)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_1")
  foods      foods?    @relation(fields: [food_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")
  variants   variants? @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_3")

  @@index([food_id], map: "food_id")
  @@index([order_id], map: "order_id")
  @@index([variant_id], map: "variant_id")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model order_statuses {
  id     Int      @id @default(autoincrement())
  type   OrderStatus   @default(PENDING)
  orders orders[]
}

model orders {
  id               Int               @id @default(autoincrement())
  user_id          Int?
  total_amount     Decimal           @db.Decimal(10, 2)
  status           Int?
  payment_status   Int?
  delivery_address String            @db.VarChar(255)
  phone            String            @db.VarChar(15)
  note             String?           @db.VarChar(255)
  created_at       DateTime?         @db.DateTime(0)
  updated_at       DateTime?         @db.DateTime(0)
  deleted_at       DateTime?         @db.DateTime(0)
  order_items      order_items[]
  users            users?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")
  order_statuses   order_statuses?   @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_2")
  payment_statuses payment_statuses? @relation(fields: [payment_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_3")

  @@index([payment_status], map: "payment_status")
  @@index([status], map: "status")
  @@index([user_id], map: "user_id")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model payment_statuses {
  id     Int      @id @default(autoincrement())
  type   PaymentStatus   @default(PENDING)
  orders orders[]
}

model side_categories {
  id               Int              @id @default(autoincrement())
  main_category_id String?          @db.VarChar(10)
  name             String?          @unique(map: "name") @db.VarChar(50)
  slug             String           @db.VarChar(50)
  description      String?          @db.VarChar(255)
  is_active        Boolean?         @default(true)
  deleted_at       DateTime?        @db.DateTime(0)
  foods            foods[]
  main_categories  main_categories? @relation(fields: [main_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "side_categories_ibfk_1")

  @@index([main_category_id], map: "main_category_id")
}

enum VariantType {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

model variants {
  id           Int            @id @default(autoincrement())
  type         VariantType    @default(SMALL)
  name         String         @db.VarChar(50)
  price_adjust Decimal        @db.Decimal(10, 2)
  is_active    Boolean?       @default(true)
  created_at       DateTime?        @default(now()) @db.DateTime(0)
  updated_at       DateTime?        @updatedAt @db.DateTime(0)
  deleted_at       DateTime?        @db.DateTime(0)
  food_variant food_variant[]
  order_items  order_items[]
}
